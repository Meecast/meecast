/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c AmbiencedIf -p ambiencedif.h:ambiencedif.cpp com.jolla.ambienced.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef AMBIENCEDIF_H_1420311724
#define AMBIENCEDIF_H_1420311724

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.jolla.ambienced
 */
class AmbiencedIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.jolla.ambienced"; }

public:
    AmbiencedIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~AmbiencedIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> createAmbience(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url);
        return asyncCallWithArgumentList(QLatin1String("createAmbience"), argumentList);
    }

    inline QDBusPendingReply<> indexFile(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url);
        return asyncCallWithArgumentList(QLatin1String("indexFile"), argumentList);
    }

    inline QDBusPendingReply<> installPackage(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QLatin1String("installPackage"), argumentList);
    }

    inline QDBusPendingReply<> refreshAmbiences()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("refreshAmbiences"), argumentList);
    }

    inline QDBusPendingReply<> remove(int contentType, qlonglong contentId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(contentType) << QVariant::fromValue(contentId);
        return asyncCallWithArgumentList(QLatin1String("remove"), argumentList);
    }

    inline QDBusPendingReply<> setAmbience(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url);
        return asyncCallWithArgumentList(QLatin1String("setAmbience"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void contentChanged(int type);
};

namespace com {
  namespace jolla {
    typedef ::AmbiencedIf ambienced;
  }
}
#endif
